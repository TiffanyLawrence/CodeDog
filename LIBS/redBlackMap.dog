// redBlackMap.dog
// Have not tested if insert fix-up results in valid red black tree
// Have not tested delele cases and if delete result in valid red black tree

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

BuildCmd = "g++ -g -std=gnu++14 `pkg-config --cflags gtk+-3.0` infonViewer.cpp `pkg-config --libs gtk+-3.0` -o infonViewer"
Title = "Infomage - redBlackMap"
FileName = "redBlackMap"
Version = "0.1"
CopyrightMesg = "Copyright (c) 2015-2016 Bruce Long"
Authors = "Bruce Long"
Description = "redBlackMap data struct"
ProgramOrLibrary = "program"

featuresNeeded = []

LicenseText = `This file is part of the "Proteus suite" All Rights Reserved.`

runCode=`testMap()`

struct RBNode{
    me int: key
    me string: value
    me bool: isBlack
    their RBNode: left
    their RBNode: right
    their RBNode: parent
}

struct RBTree{
    their RBNode: Root
    their RBNode: Leaf
    me int: size

    me bool: isLeftChild(their RBNode: node) <- {
    if(node.parent != NULL and node === node.parent.left){return(true)}
    {return(false)}
    }

    me void: leftRotate(their RBNode: node, me bool: changeColor) <- {
    their RBNode: temp <- node.right
    node.right <- temp.left
    node.right.parent <- node
    if(node.parent == NULL){
        Root <- temp
        temp.parent <- NULL
    }else{
        temp.parent <- node.parent
        if(isLeftChild(node)){
        temp.parent.left <- temp
        }else{
        temp.parent.right <- temp
        }
    }
    temp.left <- node
    node.parent <- temp

    if(changeColor == true) {
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rightRotate(their RBNode: node, me bool: changeColor) <- {
    their RBNode: temp <- node.left
    node.left <- temp.right
    node.left.parent <- node
    if(node.parent == NULL){
        Root <- temp
        temp.parent <- NULL
    }else{
        temp.parent <- node.parent
        if(isLeftChild(node) == false){
        temp.parent.right <- temp
        }else{
        temp.parent.left <- temp
        }
    }
    temp.right <- node
    node.parent <- temp

    if(changeColor == true) {
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rotate(their RBNode: node)<-{
    if(isLeftChild(node) == true){
        if(isLeftChild(node.parent) == true){
        rightRotate(node.parent.parent, false)
        node.isBlack <-false
        node.parent.isBlack <- true
        node.parent.right.isBlack <- false
        return()
        }
        rightRotate(node.parent, false)
        leftRotate(node.parent.parent, false)
        node.isBlack <-true
        node.right.isBlack <- false
        node.left.isBlack <- false
        return()
    }
    //// rotate for right child
    if(isLeftChild(node.parent) == false){
        leftRotate(node.parent.parent, false)
        node.isBlack <-false
        node.parent.isBlack <- true
        node.parent.left.isBlack <- false
        return()
    }
    leftRotate(node.parent, false)
    rightRotate(node.parent.parent, false)
    node.isBlack <-true
    node.right.isBlack <- false
    node.left.isBlack <- false
    return()
    }

    me void: correctTree(their RBNode: node)<-{
    if(node.parent===Root){
        print ("****************************** PARENT ", node.parent.key," is Root.  Node key is ", node.key, "\n")
        exit(1)
    }
    //// PARENT IS LEFT CHILD
    if(isLeftChild(node.parent) == true){
        //// BLACK AUNT ROTATE
        if(node.parent.parent.right.isBlack == true){
        rotate(node)
        return()
        }
        //// RED AUNT COLOR FLIP
        node.parent.parent.right.isBlack <- true
        node.parent.parent.isBlack <- false
        node.parent.isBlack <- true
        return()
    }
    //// PARENT IS RIGHT CHILD
    //// BLACK AUNT ROTATE
    if(node.parent.parent.left.isBlack == true){
        rotate(node)
        return()
    }
    //// RED AUNT COLOR FLIP
    node.parent.parent.left.isBlack <- true
    node.parent.parent.isBlack <- false
    node.parent.isBlack <- true
    return()
    }

    me void: checkColor(their RBNode: node) <-{
    if(node === Root or node === Leaf){
        Root.isBlack <- true
        return()
    }
    if(node.isBlack == false and node.parent.isBlack == false){correctTree(node)}
    checkColor(node.parent)
    }

    me void: BSTInsert(their RBNode: root, their RBNode: newNode) <- {
    if (newNode.key > root.key){
        if(root.right === Leaf){
        root.right <- newNode
        newNode.parent <- root
        return()
        }
        BSTInsert(root.right, newNode)
        return()
    }
    if(root.left === Leaf){
        root.left <- newNode
        newNode.parent <-root
        return()
    }
    BSTInsert(root.left, newNode)
    return()
    }

    me void: insert(me int: key, me string: value) <- {
    their RBNode: newNode
    if(Root == NULL){
        Allocate(Leaf)
        Leaf.isBlack <-true
        Allocate(newNode, key, value)
        newNode.isBlack <-true
        newNode.left <- Leaf
        newNode.right <- Leaf
        Root <- newNode
        size <- size + 1
        return()
    }
    Allocate(newNode, key, value)
    newNode.left <- Leaf
    newNode.right <- Leaf
    BSTInsert(Root, newNode)
    size <- size + 1
    checkColor(newNode)
    }

    me int: height()<-{
    if(Root == NULL){return (0)}
    return(heightHelper(Root)-1)
    }

    me int: heightHelper(their RBNode: node)<-{
    if(node == NULL){return (0)}
    me int: leftHeight <- heightHelper(node.left)+1
    me int: rightHeight <- heightHelper(node.right)+1
    if(leftHeight > rightHeight){return (leftHeight)}
    return (rightHeight)

    }

    me void: remove(me int: key) <- {
    print("remove: ", key,"\n")
    their RBNode: node
    node <- getNode(Root, key)
    removeHelper(node, key)
    }

    me void: removeHelper(their RBNode: node, their int: key) <- {
        if(node === Leaf or node == NULL) {return()}
        if(node.key == key) {
            if(node.right === Leaf or node.left === Leaf) {deleteOneChild(node)}
        else {
                their RBNode: inorderSuccessor <- findSmallest(node.right)
                node.key <- inorderSuccessor.key
                removeHelper(node.right, node.key)
            }
        }
        if(node.key < key) {removeHelper(node.right, key)}
    else {removeHelper(node.left, key)}
    }

    me void: deleteOneChild(their RBNode: nodeToBeDelete) <- {
        their RBNode: child
    if(nodeToBeDelete.right === Leaf){child <- nodeToBeDelete.left}
    else{child <- nodeToBeDelete.right}
        replaceNode(nodeToBeDelete, child)
        if(nodeToBeDelete.isBlack == true) {
            if(child.isBlack == false) {child.isBlack <- true}
        else {deleteCase1(child)}
        }
    }

    me void: replaceNode(their RBNode: node, their RBNode: child) <- {
        child.parent <- node.parent
        if(node.parent == NULL) {Root <-child}
        else {
            if(isLeftChild(node)) {node.parent.left <- child}
        else {node.parent.right <- child}
        }
    }

    their RBNode: findSmallest(their RBNode: node) <- {
        their RBNode: prev <- NULL
/*        withEach count in WHILE(node != NULL and node != Leaf):{
            prev <- node
            node <- node.left
        }
    if(prev != NULL){return (prev)}*/
        return (node)
    }

    me void: deleteCase1(their RBNode: doubleBlackNode) <- {
    print ("deleteCase1: ", doubleBlackNode.key, "\n")
    if(doubleBlackNode === Leaf){print("    Leaf\n")}
        if(doubleBlackNode.parent == NULL) {
            Root <- doubleBlackNode
            return()
        }
        deleteCase2(doubleBlackNode)
    }

    me void: deleteCase2(their RBNode: doubleBlackNode) <- {
    print ("deleteCase2: ", doubleBlackNode.key, "\n")
    their RBNode: siblingNode
    siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == false) {
            if(isLeftChild(siblingNode)) {rightRotate(siblingNode, true)}
        else {leftRotate(siblingNode, true)}
            if(siblingNode.parent == NULL) {Root <- siblingNode}
        }
        deleteCase3(doubleBlackNode)
    }

    me void: deleteCase3(their RBNode: doubleBlackNode) <- {
    print ("deleteCase3: ", doubleBlackNode.key, "\n")
    their RBNode: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == true and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true) {
            siblingNode.isBlack <- false
            deleteCase1(doubleBlackNode.parent)
        } else {
            deleteCase4(doubleBlackNode)
        }
    }

    me void: deleteCase4(their RBNode: doubleBlackNode) <- {
        print ("deleteCase4: ", doubleBlackNode.key, "\n")
    their RBNode: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == false and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true) {
            siblingNode.isBlack <- false
            doubleBlackNode.parent.isBlack <- true
            return()
        } else {
            deleteCase5(doubleBlackNode)
        }
    }

    me void: deleteCase5(their RBNode: doubleBlackNode) <- {
    print ("deleteCase5: ", doubleBlackNode.key, "\n")
        their RBNode: siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == true) {
            if (isLeftChild(doubleBlackNode) == true and siblingNode.right.isBlack == true and siblingNode.left.isBlack == false) {
                rightRotate(siblingNode.left, true)
            } else if (isLeftChild(doubleBlackNode) == false and siblingNode.left.isBlack == true and siblingNode.right.isBlack == false) {
                leftRotate(siblingNode.right, true)
            }
        }
        deleteCase6(doubleBlackNode)
    }

    me void: deleteCase6(their RBNode: doubleBlackNode) <- {
    print ("deleteCase6: ", doubleBlackNode.key, "\n")
        their RBNode: siblingNode <- findSiblingNode(doubleBlackNode)
        siblingNode.isBlack <- siblingNode.parent.isBlack
        siblingNode.parent.isBlack <- true
        if(isLeftChild(doubleBlackNode) == true) {
            siblingNode.right.isBlack <- true
            leftRotate(siblingNode, false)
        } else {
            siblingNode.left.isBlack <- true
            rightRotate(siblingNode, false)
        }
        if(siblingNode.parent == NULL) {
            Root <- siblingNode
        }
    }

    their RBNode: findSiblingNode(their RBNode: node) <- {
    their RBNode: parent<- node.parent
        if(isLeftChild(node) == true) {
            return (parent.right)
        } else {
            return (parent.left)
        }
    }

    me string: get(me int: searchKey) <- {
    their RBNode: node
    node <- getNode(Root, searchKey)
    return (node.value)
    }

    their RBNode: getNode(their RBNode: node, me int: searchKey) <- {
    withEach count in WHILE(node != NULL):{
        if (searchKey < node.key) {node <- node.left}
        else if (searchKey > node.key) {node <-node.right}
        else if (searchKey == node.key){return (node)}
    }
    return (NULL)
    }

    me void: traverse() <- {
    print("_____________________________________\n")
    print("height: ", height(), "\n")

    print("T R A V E R S E\n")
    traverseHelper(Root, "")
    print("_____________________________________\n")
    }

    me void: traverseHelper(their RBNode: node, me string: indent) <- {
    me string: isBlackStr
    if (node === Leaf){return()}
    traverseHelper(node.left, indent+"    ")
    if (node.isBlack == true){isBlackStr<-"B"}
    else{isBlackStr<-"R"}
    print(indent, node.key, ":", isBlackStr, "\n")
    traverseHelper(node.right, indent+"    ")
    }

    me int: blackNodes(their RBNode: node) <- {
    if (node === Root){return(1)}
    me int: rightBlackNodes <- blackNodes(node.right)
    me int: leftBlackNodes <- blackNodes(node.left)
    if (rightBlackNodes != leftBlackNodes){
        print ("ERROR blackNodes: ", rightBlackNodes, ", ", leftBlackNodes)
    }
    if(node.isBlack){leftBlackNodes <- leftBlackNodes + 1}
    return (leftBlackNodes)
    }


struct GLOBAL{
    me void: testMap() <- {
    their RBTree: tree
    Allocate(tree)
    me int[list]: keyList
    keyList<-[3,1,5,7,6,8,9,10,15,31,14,50,16,36,17,42,34,43,38,44,18,41,26,58,19,57,20,45,29,28,46,53,54,47,21,33,22,60,2,37,27,11,39,52,12,59,13,23,51,32,24,48,30,49,35,56,25,55,40]
    withEach item in keyList:{
        tree.insert(item, ":)")
    }
    tree.traverse()
    tree.remove(6)
    tree.traverse()
    tree.remove(26)
    tree.traverse()
    tree.remove(42)
    tree.traverse()
    tree.remove(50)
    tree.traverse()
////    me string: x <- tree.get(3)
////    print ("value at 3: ", x, "\n")
    }
}
