//####### Logger library

requirements = [
    [require, Logger_implementation]
]

struct logger{
    me bool: isVisible
    me void: Show()
    me void: Hide()
    me void: Route(me string: routeSpec)
    me void: LogEntry(me string: group, me string: LogText)
}

struct logManager{
    me string: logFileName  <- "codeDog.log"
    me logger: Mesg
    me logger: Info
    me logger: Critical
    me logger: FatalError
    me logger: Warning
    me logger: Debug
    me mode [ONone, OConsole, OFile, OBoth]: outputMode
    me bool: useLogFile
    me bool: useConsole
    //me void: assert(me string: condition)

    //ShowLogs(InfoLogs | MesgLogs | ...) // ALL_LOGS = the OR of all of them
    //HideLogs(InfoLogs | MesgLogs | ...)
    //RouteLogs(FILE) // Options: stdOut, A file, the platform's system logs, a string

    me void: init(me int: outMode) <- {
        outputMode <- outMode
        if(outputMode == OFile or outputMode == OBoth){useLogFile <- true; openLogFile();}
        else{useLogFile <- false}
        if(outputMode == OConsole or outputMode == OBoth){useConsole <- true;}
        else{useConsole <- false}
    }
}

struct GLOBAL{
    me logManager: logMgr

    //me void: assert(me string: condition) <- {}
}
