//############  Add JSON Object Implementation
requirements = [
    [tagOneOf, Platform, [Linux]]
]

interface={
    provides=[webSockets_implementation]
    libFiles=[websockets]
    headers=[libwebsockets.h]
}




LibDescription ={
    useStatus   = dynamic
    description ='Library for Websockets'
    features    =[Websockets]
    platforms   =[Linux, OS-X_Devices, Windows]
    bindings    =[C, CPP, perl, python]
    CPUs        =[i386, amd64, arm7]
}


embedHigh = `

static struct lws *wsi_generic;
static volatile int force_exit;

void sighandler(int sig){
        force_exit = 1;
}


enum APP_protocols {PROTOCOL_GENERIC, APP_PROTOCOL_COUNT};

static int webSockets_generic_callback(struct lws *wsi, enum lws_callback_reasons reason, void *user, void *inMesg, size_t mesgLen);

struct lws_context *context;


static const struct lws_protocols protocols[] = {
        {       "generic-protocol", webSockets_generic_callback,        0, 4096},  // protocol-name, callback, memToAllocate, rx_buffer_size
        {       NULL, NULL,     0, 0 }
};

static const struct lws_extension exts[] = {
        {       "permessage-deflate",           lws_extension_callback_pm_deflate,              "permessage-deflate;            client_no_context_takeover"},
        {       "deflate-frame",                        lws_extension_callback_pm_deflate,              "deflate_frame"},
        {       NULL,                                           NULL,                                                                    NULL /* terminator */ }
};

bool initializeWebsocketSystem(){
    cout<<"Initializing...\n";
        unsigned int pp_secs = 0;
        struct lws_context_creation_info contextInfo;

        memset(&contextInfo, 0, sizeof contextInfo);
        signal(SIGINT, sighandler);
        // CREATE WEBSOCKETS CONTEXT.
        contextInfo.port = CONTEXT_PORT_NO_LISTEN;
        contextInfo.protocols = protocols;
        contextInfo.gid = -1;
        contextInfo.uid = -1;
        contextInfo.ws_ping_pong_interval = pp_secs;
        contextInfo.extensions = exts;
#if defined(LWS_OPENSSL_SUPPORT)
        contextInfo.options |= LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT;
#endif
    context = lws_create_context(&contextInfo);
    if (context == NULL) {return false;}

        return true;
}


static const struct lws_http_mount mount = {
        /* .mount_next */               NULL,           /* linked-list "next" */
        /* .mountpoint */               "/",            /* mountpoint URL */
        /* .origin */                   "./assets/web",            /* serve from dir */
        /* .def */                      "index.html",   /* default filename */
        /* .protocol */                 NULL,
        /* .cgienv */                   NULL,
        /* .extra_mimetypes */          NULL,
        /* .interpret */                NULL,
        /* .cgi_timeout */              0,
        /* .cache_max_age */            0,
        /* .auth_mask */                0,
        /* .cache_reusable */           0,
        /* .cache_revalidate */         0,
        /* .cache_intermediaries */     0,
        /* .origin_protocol */          LWSMPRO_FILE,   /* files in a dir */
        /* .mountpoint_len */           1,              /* char count */
        /* .basic_auth_login_file */    NULL,
};
/* one of these created for each message */

struct msg {
        void *payload; /* is malloc'd */
        size_t len;
};

/* one of these is created for each client connecting to us */

struct per_session_data__minimal {
        struct per_session_data__minimal *pss_list;
        struct lws *wsi;
        int last; /* the last message number we sent */
};

/* one of these is created for each vhost our protocol is used with */

struct per_vhost_data__minimal {
        struct lws_context *context;
        struct lws_vhost *vhost;
        const struct lws_protocols *protocol;

        struct per_session_data__minimal *pss_list; /* linked-list of live pss*/

        struct msg amsg; /* the one pending message... */
        int current; /* the current message number we are caching */
};

/* destroys the message when everyone has had a copy of it */

static void __minimal_destroy_message(void *_msg)
{
        struct msg *mesg = (msg*)_msg;

        free(mesg->payload);
        mesg->payload = NULL;
        mesg->len = 0;
}

webSocketProtocol* firstServer;

static int callback_minimal(struct lws *wsi, enum lws_callback_reasons reason,
                        void *user, void *in, size_t len)
{
        struct per_session_data__minimal **ppss, *pss =
                        (struct per_session_data__minimal *)user;
        struct per_vhost_data__minimal *vhd =
                        (struct per_vhost_data__minimal *)
                        lws_protocol_vh_priv_get(lws_get_vhost(wsi),
                                        lws_get_protocol(wsi));
        uint32_t oldest;
        int n, m;

        switch (reason) {
        case LWS_CALLBACK_PROTOCOL_INIT:
                lwsl_user("LWS_CALLBACK_PROTOCOL_INIT\n");
                vhd = (per_vhost_data__minimal*)lws_protocol_vh_priv_zalloc(lws_get_vhost(wsi),
                                lws_get_protocol(wsi),
                                sizeof(struct per_vhost_data__minimal));
                vhd->context = lws_get_context(wsi);
                vhd->protocol = lws_get_protocol(wsi);
                vhd->vhost = lws_get_vhost(wsi);
                break;

        case LWS_CALLBACK_ESTABLISHED:
                lwsl_user("LWS_CALLBACK_ESTABLISHED\n");
                /* add ourselves to the list of live pss held in the vhd */
                pss->pss_list = vhd->pss_list;
                vhd->pss_list = pss;
                pss->wsi = wsi;
                pss->last = vhd->current;
                break;

        case LWS_CALLBACK_CLOSED:
                lwsl_user("LWS_CALLBACK_CLOSED\n");
                /* remove our closing pss from the list of live pss */
                lws_start_foreach_llp(struct per_session_data__minimal **,
                                      ppss, vhd->pss_list) {
                        if (*ppss == pss) {
                                *ppss = pss->pss_list;
                                break;
                        }
                } lws_end_foreach_llp(ppss, pss_list);
                break;

        case LWS_CALLBACK_SERVER_WRITEABLE:
                lwsl_user("LWS_CALLBACK_SERVER_WRITEABLE\n");
                if (!vhd->amsg.payload)
                        break;

                if (pss->last == vhd->current)
                        break;

                /* notice we allowed for LWS_PRE in the payload already */
                m = lws_write(wsi, (unsigned char *)vhd->amsg.payload + LWS_PRE, vhd->amsg.len,
                              LWS_WRITE_TEXT);
                if (m < vhd->amsg.len) {
                        lwsl_err("ERROR %d writing to di socket\n", n);
                        return -1;
                }

                pss->last = vhd->current;
                break;

        case LWS_CALLBACK_RECEIVE:
                lwsl_user("LWS_CALLBACK_RECEIVE\n");
                if (vhd->amsg.payload)
                        __minimal_destroy_message(&vhd->amsg);

                vhd->amsg.len = len;
                string mesgIn((char *)in, len);
                string mesgOut = firstServer->onRead(mesgIn);
                /* notice we over-allocate by LWS_PRE */
                vhd->amsg.payload = malloc(LWS_PRE + mesgOut.size());
                if (!vhd->amsg.payload) {
                        lwsl_user("OOM: dropping\n");
                        break;
                }
                vhd->amsg.len = mesgOut.size();
                memcpy((char *)vhd->amsg.payload + LWS_PRE, mesgOut.data(), mesgOut.size());
                vhd->current++;

                /*
                 * let everybody know we want to write something on them
                 * as soon as they are ready
                 */
                lws_start_foreach_llp(struct per_session_data__minimal **,
                                      ppss, vhd->pss_list) {
                        lws_callback_on_writable((*ppss)->wsi);
                } lws_end_foreach_llp(ppss, pss_list);
                break;

        }

        return 0;
}


#define LWS_PLUGIN_PROTOCOL_MINIMAL \
        { \
                "lws-minimal", \
                callback_minimal, \
                sizeof(struct per_session_data__minimal), \
                128, \
                0, NULL, 0 \
        }


static struct lws_protocols ServerProtocols[] = {
        { "http", lws_callback_http_dummy, 0, 0 },
        LWS_PLUGIN_PROTOCOL_MINIMAL,
        { NULL, NULL, 0, 0 } /* terminator */
};
`


embedLow = `
// codeDog websockets for linux
// Client Code
static int webSockets_generic_callback(struct lws *wsi, enum lws_callback_reasons reason, void *user, void *inMesg, size_t mesgLen){
        const char *which = "http";
        char  buf[50 + LWS_PRE];
    int n;
    std::string mesg;

        switch (reason) {
        case LWS_CALLBACK_CLIENT_ESTABLISHED:
        ((webSocketConnection*)user)->onConnect(wsi);
        break;
        case LWS_CALLBACK_CLOSED:
        ((webSocketConnection*)user)->onClosed(wsi);
                wsi_generic = NULL;
                break;
        case LWS_CALLBACK_CLIENT_RECEIVE:
        cout<<"LWS_CALLBACK_CLIENT_RECEIVE\n";
        ((char *)inMesg)[mesgLen] = '\0';
        mesg = (char*)inMesg;
        ((webSocketConnection*)user)->onReceive(wsi, mesg);
        break;
        case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:
        ((char *)inMesg)[mesgLen] = '\0';
        mesg = (char*)inMesg;
        ((webSocketConnection*)user)->onError(wsi, mesg);
                if (wsi == wsi_generic)         {which = "generic";     wsi_generic   = NULL;}
                lwsl_err("CLIENT_CONNECTION_ERROR: %s: %s\n", which, inMesg ? (char *)inMesg : "(null)");
                break;
        case LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED:
        cout<<"LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED\n";
                break;
        case LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP:
        cout<<"LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP\n";
                break;
        case LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ:     // chunked content;
        cout<<"LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ\n";
                break;
        case LWS_CALLBACK_RECEIVE_CLIENT_HTTP:{
        cout<<"LWS_CALLBACK_RECEIVE_CLIENT_HTTP\n";
                char buffer[1024 + LWS_PRE];
                char *px = buffer + LWS_PRE;
                int lenx = sizeof(buffer) - LWS_PRE;
                if (lws_http_client_read(wsi, &px, &lenx) < 0)          return -1;}
                break;
        case LWS_CALLBACK_CLIENT_WRITEABLE:
        cout<<"LWS_CALLBACK_CLIENT_WRITEABLE\n";
                break;
        case LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER:
        cout<<"LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER\n";
                break;
        case LWS_CALLBACK_CLIENT_HTTP_WRITEABLE:
        cout<<"LWS_CALLBACK_CLIENT_HTTP_WRITEABLE\n";
                strcpy(buf + LWS_PRE, "text=hello&send=Send+the+form");
                n = lws_write(wsi, (unsigned char *)&buf[LWS_PRE], strlen((char *)&buf[LWS_PRE]), LWS_WRITE_HTTP);
                if (n < 0) return -1;
                // we only had one thing to send, so inform lws we are done if we had more to send, call lws_callback_on_writable(wsi); and just return 0 from callback.  On having sent the lastpart, call the below api instead.
                lws_client_http_body_pending(wsi, 0);
                break;
        case LWS_CALLBACK_COMPLETED_CLIENT_HTTP:
        cout<<"LWS_CALLBACK_COMPLETED_CLIENT_HTTP\n";
                wsi_generic = NULL;
                force_exit = 1;
                break;
        default:
                break;
        }
        return 0;
}

`


struct GLOBAL{
    me bool: webSocketLibIsGoing <- false
   // their webSocketProtocol: firstServer
}

struct webSocketConnection{
    me string: URL


     me bool: connect(me string: url) <- <%{
        URL = url;
        int  port = 7681, use_ssl = 0, ietf_version = -1;
        const char *prot, *p;
        string  protocol;
        char path[300];

        if(!webSocketLibIsGoing){
            webSocketLibIsGoing =initializeWebsocketSystem();
            if(!webSocketLibIsGoing){cout<<"Websockets failed to initialize\n"; exit(1);};
        }
        struct lws_client_connect_info clientInfo;
        memset(&clientInfo, 0, sizeof(clientInfo));
        clientInfo.port = port;

        if (lws_parse_uri((char*)URL.data(), &prot, &clientInfo.address, &clientInfo.port, &p))
            return(false);
        protocol=prot;
        path[0] = '/';
        strncpy(path + 1, p, sizeof(path) - 2);
        path[sizeof(path) - 1] = '\0';
        clientInfo.path = path;

        if (protocol == "http" || protocol == "ws") use_ssl = 0;
        else if (protocol == "https" || protocol == "wss") use_ssl =  LCCSCF_USE_SSL;   // |  LCCSCF_ALLOW_SELFSIGNED | LCCSCF_SKIP_SERVER_CERT_HOSTNAME_CHECK; // 1;

        clientInfo.context = context;
        clientInfo.ssl_connection = use_ssl;
        clientInfo.host = clientInfo.address;
        clientInfo.origin = clientInfo.address;
        clientInfo.ietf_version_or_minus_one = ietf_version;
        clientInfo.protocol = protocols[PROTOCOL_GENERIC].name;
        clientInfo.pwsi = &wsi_generic;
        clientInfo.userdata = this;

        cout<<"protocol:"<<protocol<<"\n";
        cout<<"PORT:"<<clientInfo.port<<"\n";
        cout<<"PATH:"<<p<<"\n";
        cout<<"ADDR:"<<clientInfo.address<<"\n";
        cout<<"SSL:"<<clientInfo.ssl_connection<<"\n";

        lws_client_connect_via_info(&clientInfo);
        while (!force_exit) {lws_service(context, 500);}

        return(true);
    }%>

    void: disconnect() <-  <%{lws_context_destroy(context);}%>

    void: emit(their lws: wsi, me string: mesg) <-  <%{
        char buf[mesg.size() + LWS_PRE];
        strcpy(buf + LWS_PRE , mesg.data());
        lws_write(wsi,  (unsigned char *)&buf[LWS_PRE], mesg.size(), LWS_WRITE_TEXT);
    }%>
}


struct webServer{
    me string: folderToServe <- "./assets/web"
    me string: defaultFile <- "index.html"
    me int: port <- 8080
    me string: IP_address <- "localhost"
    me bool: startServing() <- <%{
        struct lws_context_creation_info info;
        struct lws_context *context;
        int n = 0;

        memset(&info, 0, sizeof info); /* otherwise uninitialized garbage */
        info.port =  port;
        info.mounts = &mount;
        info.protocols = ServerProtocols;

        lws_set_log_level(LLL_ERR | LLL_WARN | LLL_NOTICE | LLL_USER, NULL);
        lwsl_user("LWS minimal ws server | visit http://localhost:7681\n");

        context = lws_create_context(&info);
        if (!context) {
                lwsl_err("lws init failed\n");
                return 1;
        }

        while (n >=0)
                n = lws_service(context, 1000);

        lws_context_destroy(context);

    }%>
    me void: stopServing() <- {}
}
