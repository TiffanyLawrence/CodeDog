// CodeDog Threads Library

requirements = [
   [tagOneOf, Lang, [CPP]]
]

interface={
    provides=[threads_implementation]
    libFiles=[pthread]
    headers=[thread]
}

LibDescription  ={
    useStatus   = dynamic
    description ='Library for Webmulti-thread programming'
    features    =[Threads]
    Lang    =[CPP]
}

struct Threads{
    me bool: notDone <- true
    me uint: ID()           <- {return(5);}     // TODO: Finish Thread::ID(), Thread::isActive() and make active threads automatically join() in destructor.
    bool: isActive()        <- {return(true);}
    void: start()           <- <%{ T = std::thread(&Threads::run, this); }%>
    void: waitForExit()     <- <%{T.join();}%>

    me thread: T

}
