// CodeDog Terminal Manager Library

requirements = []

interface={
    libFiles=[curses]
    headers=[cursesw.h]
}

LibDescription  ={
    useStatus   = dynamic
    description ='Library for terminal management'
    features    =[Terminal]
    platforms   =[Linux, OS-X_Devices, Windows]
}

struct GLOBAL{
    void: initTerminalControls() <- <%!initscr(); start_color(); use_default_colors();%>
    void: moveCursor(me int: x, me int: y) <- <%!move(%1, %2)%>
    void: getScreenMaxXY(me int: x, me int: y) <- <%!getmaxyx(stdscr, %2, %1)%>
    void: setColorPair(me int: pairIdx, me int: foregroundColor, me int: backgroundColor) <- <%!init_pair(%1, %2, %3)%>
    void: getColorPair(me int:idx) <- <%!COLOR_PAIR(%1)%>
    void: attrOn(me int: attr) <- <%!attron(%1)%>
    void: attrOff(me int: attr) <- <%!attroff(%1)%>
    void: setScrollingOK(me bool: value) <- <%!scrollok(stdscr, %1)%>
    void: enableFNKeyDetection(me bool: value) <- <%!keypad(stdscr, %1)%>
    void: dontCnvtNewLine() <- <%!nonl()%>
    void: disableKeypressBuffering() <- <%!cbreak()%>
    void: disableKeypressEchoing() <- <%!noecho()%>
    void: clearToEOL() <- <%!clrtoeol()%>
    void: clearToBottom() <- <%!clrtobot()%>
    void: refreshScn() <- <%!refresh()%>
    void: putChar(me char: ch) <- <%!addch(%1)%>
    void: putStr(me string: s) <- <%!addstr(%1)%>
    void: movePutChar(me int: X, me int: Y, me char: ch) <- <%!mvaddch(%2, %1, %3)%>
    void: movePutStr(me int: X, me int: Y, me string: s) <- <%!mvaddstr(%2, %1, %3)%>
    me int: getChar() <- <%!getch()%>

    me int: waitForKeyPressed(me bool: guiMode) <- <%{
        wint_t key=0;
        while(key==0){
            if(!guiMode && key==KEY_RESIZE && isendwin()) endwin();
            key = getch();
        }
        return(key);
    }%>

}
