// CodeDog Unicode Library

requirements = [
    [require, Unicode_implementation]
]

LibDescription  ={
    useStatus   = dynamic
    description ='Library for Unicode'
    features    =[Unicode]
    platforms   =[Linux, OS-X_Devices, Windows]
}

struct GLOBAL {
    me UnicodeMgr: unicodeMgr
}

struct DateTimeFields{
    me int: year
    me int: month
    me int: day
    me int: hour
    me int: minute
    me int: second
    me int: millisecond
}

struct DateFormat {me SimpleDateFormat: DateFormat}
struct Normalizer {their Normalizer2: Normalizer}
struct USpoofChecker {me USpoofChecker: USpoofChecker}

struct UnicodeMgr {
    me UnicodeStr: chooseFormatPattern(me double: graphInterval) <- {
        me UnicodeStr: dateFormat
        me double: minutes<-1000.0
        me double: hours <- 1000.0*60*60
        me double: days  <- 1000.0*60*60*24
        me double: weeks <- 1000.0*60*60*24*7
        me double: months<- 1000.0*60*60*24*30
        me double: years <- 1000.0*60*60*24*300

        if (graphInterval >= years) {dateFormat <- "yyyy/MMM/dd"}
        else if (graphInterval >= months) {dateFormat <- "MMM d"}
        else if (graphInterval >= weeks) {dateFormat <- "MMM d, h:mm a"}
        else if (graphInterval >= days) {dateFormat <- "E h:mm a"}
        else if(graphInterval >= hours) {dateFormat <- "E h:mm a"}
        else if(graphInterval >= minutes) {dateFormat <- "h:mm:ss a"}
        else {dateFormat <- "H:mm:sss"}
        return(dateFormat)
    }
}
