// CodeDog Websockets Library

requirements = [
    [require, webSockets_implementation]
]

interface={
    provides=[Websockets]
    libFiles=[]
    headers=[]
}

LibDescription  ={
    useStatus   = dynamic
    description ='Library for Websockets'
    features    =[Websockets]
    platforms   =[Linux, OS-X_Devices, Windows]
}

struct webSocketConnection{
    me string: URL

    bool: connect(me string: url)
    void: disconnect()
    void: emit(their lws:wsi, me string: mesg)
    void: onConnect(their lws:wsi) <- {}
    void: onReceive(their lws:wsi, me string: mesg) <- {}
    void: onError(their lws:wsi, me string: errorMesg) <- {}
    void: onClosed(their lws:wsi) <- {}
}

struct webSocketProtocol{
    void: send(me string: mesg) <- {}
    void: sendToAll(me string: mesg) <- {}
    me string: onRead(me string: mesg) <- {}
    void: onConnection() <- {}
    void: onDisconnect() <- {}
}

struct webServer{
    me string: folderToServe <- "./assets/web"
    me string: defaultFile <- "index.html"
    me int: port <- 8080
    me string: IP_address <- "localhost"
    me bool: startServing()
    me void: stopServing()
}
