// CodeDog GUI toolikt
requirements = [
    [require, GUI_ToolKit_implementation]
]

// Set up a complete application: fonts, colors, a window/frame with a menu, toolbar, app area and optionally a statusbar.
// Boilerplate details such as resizing windows, etc are taken care of in the best way for each platform.

struct cdColor{
    me uint: red
    me uint: green
    me uint: blue
}

struct ColorScheme{}
struct FontSpec{}
struct FontScheme{}

struct deltaSize{me int: width    me int: height}
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{}
struct GUI_ctxt{}


struct GUI_item{}
struct GUI_menuBar{}
struct GUI_menu{}
struct GUI_menuItem{}
struct GUI_canvas{}
struct GUI_container{}
struct GUI_Frame{}
struct GUI_ScrollingWindow{}
struct GUI_callback{}
struct GUI_MotionEvent{}
struct INK_Image{}

struct GUI_button{}

// GUI Widgets
struct boolWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct floatWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct rangeWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct numRangeWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct CGContext {}
struct CGPoint {}

struct intWidget: inherits=baseTypeWidget properties = [metaClass]{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct intRangeWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct stringWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct enumWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct timeWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct dateWidget: inherits=baseTypeWidget{void: onChanged()  <- {parentGuiMgr.onChanged()}}
struct wizardWidget:inherits=appComponentGUI{
    me string: widgetID
    our appComponentData: _data
    their GUI_Frame:  box
    their GUI_ZStack: ZStack
    me int:           activeScreenIdx
    me string[list]:  children

    their GUI_Frame: initWidget(me string: name) <- {
        widgetID        <- name
        activeScreenIdx <- 0
        box             <- makeYStack("")
        ZStack          <- makeZStack("")
        addToContainer(box, ZStack)
        return(box)
    }
    void: setActiveChild(me int: N) <- {
        me string: childStr <- children[N]
        setZStackActive(ZStack, childStr)
    }
}
struct matterTerm: inherits=baseTypeWidget{
    me string[list]: matterTypes <- ["a", "b"]
    me int:          matterIdx   <- 0
    me double:       term        <- 0
    me string:       units       <- ""
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
struct MatterTermWidget: inherits=baseTypeWidget{
    their GUI_Frame:    box
    their GUI_Label:    label
    their GUI_ComboBox: matterBox
    their GUI_SpinBox:  termBox
    their GUI_Label:    unitsBox

    our matterTerm::    data
    me double: initialValue  <- 0
    me double: minValue      <- 0
    me double: maxValue      <- 1000
    me int:    decimalPlaces <- 0

    their GUI_Frame: initWidget(me string: name, our matterTerm: dataInit) <- {
        ///// DATA //////////////////////////////////////
        data <- dataInit
        me string: units <- data.units
        ///// MAKE WIDGETS //////////////////////////////
        box              <- makeXStack("")
        label            <- makeLabelWidget2(name)
        matterBox        <- makeComboBox()
        termBox          <- makeSpinBox(initialValue, minValue, maxValue, decimalPlaces)
        unitsBox         <- makeLabelWidget2(units)
        ///// FILL WIDGETS //////////////////////////////
        matterBox.setAndroidAdapter(matterTermArrayAdapter, String, data.matterTypes)
        me int: count <-0
        withEach matterType in data.matterTypes{
            matterBox.appendStringComboBox(toString(count),matterType, matterTermArrayAdapter)
            count <- count +1
        }
        ///// ADD WIDGETS //////////////////////////////
        addToContainer(box, label)
        addToContainer(box, matterBox)
        addToContainer(box, termBox)
        addToContainer(box, unitsBox)
        return(box)
    }
    our matterTerm: getValue() <- {
        our matterTerm: retVal
        Allocate(retVal)
        retVal.matterTypes <- data.matterTypes
        retVal.matterIdx   <- matterBox.comboBoxGetActive()
        retVal.term        <- termBox.getValue()
        retVal.units       <- data.units
        return(retVal)
    }
    void: setValue(our matterTerm: setVal) <- {
        data.matterIdx     <- setVal.matterIdx
        data.term          <- setVal.term
        data.units         <- setVal.units
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
struct GUI{
    me GUI_item: newCanvas()
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height)
    me void: addMenuBar(me GUI_menuBar: menubar)
    me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)
    me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)
    me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)
    me void: setCallback()
}

struct fontSpec{
    me string: name
    me int: size
    me mode[pp, dp, sp]: pixelMode

    none: fontSpec(me string: initName, me string: initSize) <- {
        name      <- initName
        size      <- stoi(initSize)
    }
}

struct Styler{
    #include LIBS/x11ColorsRGB.txt
}

struct GLOBAL{
    me floatWidget:     makeFloatWidget(me string: label)
    me numRangeWidget:  makeNumRangeWidget(me string: label)
    me rangeWidget:     makeRangeWidget(me string: label)
    me timeWidget:      makeTimeWidget(me string: label)
    me dateWidget:      makeDateWidget(me string: label)
}
struct GUI_ctxt {
    //me void: fetchAreaToBeDrawn(me GUI_rect: area)
    me void: reset()
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha)
    me void: setRGB (me double: red, me double: green, me double: blue)
    me void: setColor(me cdColor: color)
    me void: setLineWidth(me double: width)
    me void: finishPDF()
    me void: setScale()
    me void: moveTo(me double: x, me double: y)
    me void: lineTo(me double: x, me double: y)
    me void: moveRel(me double: dx, me double: dy)
    me void: lineRel(me double: dx, me double: dy)
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3)
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3)
    me void: closePath()
    me void: rectangle()
    me void: paintNow()
    me void: strokeNow()
    me void: fillNow()
    me void: strokeKeep()
    me void: fillKeep()
    me void: setFillPattern()
    me void: circle(me int: centerX, me int: centerY, me int: radius)
}


///////// Widgets and events

struct GUI_PointerEvent{}
struct GUI_ButtonEvent{}
struct GUI_KeyboardEvent{}
struct GUI_WindowEvent{}
struct GUI_DataEvent{}
struct GUI_TimeEvent{}
struct GUI_UserEvent{}
struct GUI_DrawEvent{}
struct GUI_Scalar{}


// decor(ations) are like light weight widgets. They have only draw().

struct decor{
    void: draw(their GUI_ctxt: cr) <- {}
}

struct arrow: inherits=decor{
    me double: startX
    me double: startY
    me double: endX
    me double: endY

    me void: draw(their GUI_ctxt: cr) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(endY - startY, endX - startX) + 3.14159265359

        me double: x1 <- endX + tipLength * cos(angle - tipAngle)
        me double: y1 <- endY + tipLength * sin(angle - tipAngle)
        me double: x2 <- endX + tipLength * cos(angle + tipAngle)
        me double: y2 <- endY + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    none: arrow(me GUI_Scalar: StartX, me GUI_Scalar: StartY, me GUI_Scalar: EndX, me GUI_Scalar: EndY) <- {
        startX <- StartX
        startY <- StartY
        endX   <- EndX
        endY   <- EndY
    }
}

struct widget{
    me GUI_Scalar: posX    // x position of top left corner
    me GUI_Scalar: posY    // y position of top left corner
    me GUI_Scalar: width   // width of widget
    me GUI_Scalar: height  // height of widget
    me int: scale
    bool: isHidden

    void: draw(their GUI_ctxt: cr) <- {}
    me bool: handleAllClicks(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseDragged(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseEnter(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseExit(their GUI_MotionEvent: event) <- {return(false)}
    me bool: mouseWheel(their GUI_MotionEvent: event) <- {return(false)}
    me bool: fingerSqueeze(their GUI_PointerEvent: event) <- {return(false)}

    me bool: keyTyped(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyDown(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyUp(their GUI_KeyboardEvent: event) <- {return(false)}

    me bool: windowChange(their GUI_WindowEvent: event) <- {return(false)}
    me bool: dataUpdated(their GUI_DataEvent: event) <- {return(false)}         // This widget's data has been updated
    me bool: timerTick(their GUI_TimeEvent: event) <- {return(false)}           // Timer to change data
    me bool: tweenTick(their GUI_TimeEvent: event) <- {return(false)}           // Timer for state-change animation frame
    me bool: userEvent(their GUI_UserEvent: event) <- {return(false)}
    me bool: focused(their GUI_PointerEvent: event) <- {return(false)}
    me bool: unfocused(their GUI_PointerEvent: event) <- {return(false)}

    bool: isTouchingMe(me GUI_Scalar: x, me GUI_Scalar: y) <- {
        return ((x >= posX) and (x < posX + width) and (y >= posY) and (y < posY + height))
    }

    void: initialize(me int: PosX, me int: PosY, me GUI_Scalar: Width, me GUI_Scalar: Height, me int: Scale, me int: Alpha ) <- {
        posX   <- PosX
        posY   <- PosY
        width  <- Width
        height <- Height
        scale  <- Scale
    }
}
struct appComponentData{
    their appComponentGUI: guiMgr
    void: wizardFinished(me string: wizID) <- {print ("wizardFinished BASE: ", wizID, "\n")}
}
struct appComponentGUI{
    their appComponentGUI: parentGuiMgr
    me string: title
    void: setActiveChild(me int: N) <-{print ("setActiveChild BASE: \n")}
    void: getValue()   <- {print("getValue BASE: \n")}
    bool: isComplete() <- {print("isComplete BASE: \n");return(true)}
    void: save()       <- {print("save BASE:\n")}
    void: clickNext()  <- {print("clickNext BASE:\n")}
    void: clickBack()  <- {print("clickBack BASE:\n")}
    void: clear()      <- {print("clear BASE:\n")}
    void: load()       <- {} // {print("load BASE:\n")}
    void: onLoaded()   <- {} // {print("onLoaded BASE:\n")}
    void: onChanged()  <- {print("onChanged BASE:\n")}
    void: deleteIndex(me int: N) <- {print("deleteIndex BASE:\n")}
}
struct baseTypeWidget{
    their appComponentGUI: parentGuiMgr
    void: onChanged()  <- {print("onChanged BASE:\n")}
}
/////////////////////////////////  HIGHER LEVEL WIDGETS

struct ListWidgetManager{
    their GUI_Frame[their list]: rows

    // Override all these for each new list editing widget
    their listWidget: makeListViewWidget()  <- {return(NULL)}
    their GUI_Frame: makeListHeader()       <- {return(NULL)}
    void: updateViewableWidget()            <- {}
    their GUI_Frame: makeEditableWidget()    <- {return(NULL)}
    void: updateEditableWidget(me int: N)   <- {}
    void: updateCrntFromEdited(me int: N)   <- {}
    void: allocateNewCurrentItem()          <- {}
    me int: pushCrntToList(me int: N)       <- {return(0)}
    me int: deleteNthItem(me int: N)        <- {return(0)}
    void: deleteNthRow(me int: N)           <- {}
    void: copyCrntBackToList(me int: N)     <- {}
    void: copyCrntBackToListView(me int: N) <- {}
    void: setCurrentItem(me int: idx)       <- {}
    me int: getListLength()                 <- {return(0)}
    their GUI_Frame: getNthRow(me int: N)   <- {return(NULL)}
    // Also, add their GUI_item: initWidget(<listType>)
}

////////////////////////////////////// MISC WIDGETS
struct DateWidget: inherits=baseTypeWidget{
    their GUI_Frame:    box
    their GUI_Label:    dataLabel
    me timeValue:       data
    me string[list]:    months <- ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']
    me int[list]:       days

    their GUI_Frame: initCrnt(me string: label) <- {
        me timeValue: crntTime <- getCurrentTimeStamp()
        box <- initialize(label, crntTime)
        return(box)
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}

struct TimeWidget: inherits=baseTypeWidget{
    their GUI_Frame:    box
    their GUI_Label:    dataLabel
    their GUI_ComboBox: hourBox
    their GUI_ComboBox: minuteBox
    me timeValue:       data
    me int[list]:       hours
    me int[list]:       minutes

    their GUI_Frame: initCrnt(me string: label) <- {
        me timeValue: crntTime <- getCurrentTimeStamp()
        box <- initialize(label, crntTime)
        return(box)
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}

struct DateTimeWidget: inherits=baseTypeWidget{
    their GUI_Frame:  box
    their GUI_Label:  dataLabel
    their GUI_Frame:  dateBox
    their DateWidget: dateWidget
    their GUI_Frame:  timeBox
    their TimeWidget: timeWidget
    me timeValue:     data

    their GUI_Frame: initCrnt(me string: label) <- {
        me timeValue: crntTime <- getCurrentTimeStamp()
        box <- initialize(label, crntTime)
        return(box)
    }
    their GUI_Frame: initialize(me string: label, me timeValue: defaultTime) <- {
        dataLabel <- makeLabelWidget2(label);
        ///// DATE ////////////////////////////////////
        Allocate(dateWidget)
        dateBox <- dateWidget.initCrnt("Date")
        ///// TIME ////////////////////////////////////
        Allocate(timeWidget)
        timeBox <- timeWidget.initCrnt("Time")
        ///// RETURN BOX //////////////////////////////
        box <- makeXStack("")
        addToContainer(box, dataLabel)
        addToContainer(box, dateBox)
        addToContainer(box, timeBox)
        return(box)
    }
    me timeValue: getValue() <- {
        me timeValue: tmpDate <- dateWidget.getValue()
        me timeValue: tmpTime <- timeWidget.getValue()
        me timeValue: retVal  <- tmpDate + tmpTime
        return(retVal)
    }
    void: setValue() <- {}
    void: clear() <- {
        dateWidget.clear()
        timeWidget.clear()
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
struct Agreement:inherits=appComponentData{
    me string: fileName
    me bool:   doesAgree
}
struct AgreeWidget:inherits=appComponentGUI COMMAND_addCallProxy=["widgetData:onChanged"] {
    their GUI_Frame:            box
    their GUI_VerticalScroller: textScroller
    their GUI_TextViewer:       textBox
    their GUI_Frame:            agreeFrame
    their GUI_Label:            agreeLabel
    their GUI_Bool:             agreeCheckBox
    me Agreement:               _data
    me string:                  bodyTxt

    their GUI_Frame: initWidget(me string: fileName) <- {
        _data.fileName     <- fileName
        _data.guiMgr       <- self
        bodyTxt            <- readAssetAsString(_data.fileName)
        textScroller       <- makeVerticalScroller(1000,500)
        textBox            <- makeTextViewer(bodyTxt)
        ///// CHECKBOX ////////////////////////////////
        agreeFrame         <- makeXStack("")
        agreeLabel         <- makeLabelWidget("I Accept")
        agreeCheckBox      <- makeCheckBox()
        setBtnProxy(agreeCheckBox, "clicked",AgreeWidget, onChanged, self)
        ///// RETURN BOX //////////////////////////////
        box                <- makeYStack("")
        addToContainer(textScroller, textBox)
        addToContainer(agreeFrame, agreeLabel)
        addToContainer(agreeFrame, agreeCheckBox)
        addToContainer(box, textScroller)
        addToContainer(box, agreeFrame)
        return(box)
    }
    void: getValue()               <- {_data.doesAgree <- agreeCheckBox.getValue()}
    void: setValue(me bool: value) <- {agreeCheckBox.setValue(value)}
    void: setText(me string: text) <- {}
    void: onChanged()              <- {parentGuiMgr.onChanged()}
}
