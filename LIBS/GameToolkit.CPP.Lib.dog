//############  Add Game-Toolkit features using GTK3
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides=[GameToolkit_implementation]
    libFiles=[`pkg-config --cflags --libs sdl2`, SDL2_mixer, `pkg-config --cflags --libs cairo`, `pkg-config --cflags --libs pangocairo`]
    headers=[SDL.h, SDL_mixer.h, cairo.h, pango/pangocairo.h]
}

LibDescription ={
    useStatus   = dynamic
    description ='A CodeDog Toolkit for making games'
    features    =[]
    platforms   =[Linux]
    bindings    =[C, CPP]
    CPUs        =[i386, amd64, arm7]
}

initCode = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GRWindow{their SDL_Window: GRWindow}
struct GUI_ctxt{their cairo_t:GUI_ctxt}
struct GameEvent{their SDL_Event:GameEvent}
struct UserEvent{their SDL_UserEvent:UserEvent}
struct WindowEvent{their SDL_WindowEvent:WindowEvent}
struct KeyboardEvent{their SDL_KeyboardEvent:KeyboardEvent}
struct MouseButtonEvent{their SDL_MouseButtonEvent:MouseButtonEvent}
struct MouseMotionEvent{their SDL_MouseMotionEvent:MouseMotionEvent}
struct MouseWheelEvent{their SDL_MouseWheelEvent:MouseWheelEvent}
struct KeyInfo{their SDL_Keysym:KeyInfo}
struct Keycode{their SDL_Keycode:Keycode}
struct INK_Image{their cairo_surface_t: INK_Image}
struct SoundData{their Mix_Chunk: SoundData}
struct GameSurface{their SDL_Surface: GameSurface}
/////////////////////////////////  GLOBAL
struct GLOBAL{
    void: deallocateWindow(their GRWindow: window)      <- <%!%GSDL_DestroyWindow(%1)%>
    void: deallocateGraphicsSystem()                    <- <%!%GSDL_Quit()%>
    void: getTickCount()                                <- <%!%GSDL_GetTicks()%>
    their GUI_ctxt: createGUI_ctxt() <- <%!%Gcairo_create(canvas)%>
    their GameSurface: screenSurface
    their INK_Image:   canvas
    me int: screenWidth
    me int: screenHeight
    const int: SCREEN_WIDTH  <- 900
    const int: SCREEN_HEIGHT <- 700

    me bool: getFullScreenMode() <- <%{
        return(SDL_GetWindowFlags(window) & SDL_WINDOW_FULLSCREEN);
    }%>

    void: fullScreenModeOn() <- <%{
	SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP);
        SDL_SetRelativeMouseMode(SDL_TRUE);
    }%>

    void: fullScreenModeOff() <- <%{
        SDL_SetWindowFullscreen(window, SDL_FALSE);
        SDL_SetRelativeMouseMode(SDL_FALSE);
    }%>

    void: initializeGraphics(me bool: startFullScreen) <- <%{
        cairo_t *cr;
        //The surface contained by the window
        screenSurface = NULL;
        //Initialize SDL
        if( SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO) < 0 ){
            printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        }else{
            Mix_OpenAudio( 44100, MIX_DEFAULT_FORMAT, 2, 2048 );
            //Create window
            Uint32 fullScreenFlag = (startFullScreen)?SDL_WINDOW_FULLSCREEN_DESKTOP:0;
            window = SDL_CreateWindow( "SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN|fullScreenFlag);
            SDL_SetWindowResizable(window, SDL_TRUE);
            SDL_GetWindowSize(window, &screenWidth, &screenHeight);
            if( window == NULL ){
                printf( "Window could not be created! SDL_Error: %s\n", SDL_GetError());
            }else{
                //Get window surface
                screenSurface = SDL_GetWindowSurface(window);
                canvas = cairo_image_surface_create_for_data((unsigned char*) screenSurface->pixels,CAIRO_FORMAT_RGB24,screenSurface->w,screenSurface->h,screenSurface->pitch);
            }
        }
    }%>

    void: resetWindowSize(me int: width, me int: height) <- <%{
        screenWidth  = width;
        screenHeight = height;
        if(canvas) cairo_surface_destroy(canvas);
        if(screenSurface) {
            SDL_FreeSurface(screenSurface);
            screenSurface=0;
        }
        screenSurface = SDL_GetWindowSurface(window);
        canvas = cairo_image_surface_create_for_data((unsigned char*) screenSurface->pixels,CAIRO_FORMAT_RGB24, width, height, screenSurface->pitch);
    }%>

    // //DRAWING ROUTINES:
    me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cairo_move_to(cr,x,y);
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);

        string fontDesc=font.name+' '+ std::to_string(font.size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);

        cairo_set_line_width(cr, 0.5);
        pango_cairo_update_layout(cr, layout);
        pango_cairo_show_layout_line (cr, pango_layout_get_line (layout, 0));
       // pango_cairo_layout_path(cr, layout);
        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        cairo_fill(cr);
        return(size);
    }%>

    me deltaSize: renderTextCentered(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        deltaSize size = getTextSize(cr, text, font);
    renderText(cr, text, font, x-size.width/2, y);
        return(size);
    }%>

    me deltaSize: renderTextRotate(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{
        double radians    = degrees*(M_PI/180.);
        deltaSize size    = getTextSize(cr, text, font);
        double hypotenuse = size.width;
        deltaSize tmpSize;

        rotate(cr, x, y, -45);
        if(justify == "right"){x=x-hypotenuse;}
        else if(justify == "center"){x=x-hypotenuse/2;}
        renderText (cr, text, font, x, y);
        cairo_restore(cr);
        //TODO: calculate height and width more accurately
        tmpSize.height       = cos(abs(radians))*hypotenuse;
        tmpSize.width        = sin(abs(radians))*hypotenuse;
        hypotenuse           = size.height;
        radians              = M_PI/2 - abs(radians);
        tmpSize.height       = tmpSize.height + sin(radians)*hypotenuse;
        tmpSize.width        = tmpSize.width + cos(radians)*hypotenuse;
        //size.width = size.width*0.9;
        //size.height = size.width;
        return(tmpSize);
    }%>

    me void: rotate(their GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{
    double radians = degrees*(M_PI/180.);
    cairo_save(cr);
    cairo_translate(cr,x,y);
    cairo_rotate(cr, radians);
    cairo_translate(cr,-x,-y);
    }%>

    me void: restore() <- <%!cairo_restore(cr)%>

    me deltaSize: getTextSize(their GUI_ctxt: cr, me string: text, me fontSpec: font) <- <%{
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);

        string fontDesc=font.name+' '+ std::to_string(font.size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);

        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        return(size);
    } %>

    me void: roundedRectangle(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{
        cairo_move_to(cr,x+r,y);                      //# Move to A
        cairo_line_to(cr,x+w-r,y);                    //# Straight line to B
        cairo_curve_to(cr,x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cairo_line_to(cr,x+w,y+h-r);                  //# Move to D
        cairo_curve_to(cr,x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cairo_line_to(cr,x+r,y+h);                    //# Line to F
        cairo_curve_to(cr,x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cairo_line_to(cr,x,y+r);                      //# Line to H
        cairo_curve_to(cr,x,y,x,y,x+r,y);             //# Curve to A;
    } %>

    // WARNING: if displayImage is changed, you may also need to change displayBackgroundImage
    void: displayImage(their GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: xScale, me double: yScale) <- <%{
        cairo_surface_t* pic=0;
        map<string, cairo_surface_t*>::iterator picPtr=picCache.find(filename);
        if (picPtr==picCache.end()) {picCache[filename]=pic=cairo_image_surface_create_from_png(filename.data());}
        else pic=picPtr->second;
	
        cairo_save(cr);
        cairo_scale(cr, 1/xScale, 1/yScale);
        cairo_set_source_surface(cr,pic,x*xScale,y*yScale);
        cairo_paint(cr);
        cairo_restore(cr);
    }%>
    // WARNING: if displayBackgroundImage is changed, you may also need to change displayImage
    void: displayBackgroundImage(their GUI_ctxt: cr, me string: filename) <- <%{
	cairo_surface_t* pic=0;
        map<string, cairo_surface_t*>::iterator picPtr=picCache.find(filename);
        if (picPtr==picCache.end()) {picCache[filename]=pic=cairo_image_surface_create_from_png(filename.data());}
        else pic=picPtr->second;
	
	double picWidth = cairo_image_surface_get_width(pic);
	double picHeight = cairo_image_surface_get_height(pic);
	double xScale = screenWidth / picWidth;
	double yScale = screenHeight / picHeight;
	
        cairo_save(cr);
        cairo_scale(cr, xScale, yScale);
        cairo_set_source_surface(cr,pic,0,0);
        cairo_paint(cr);
        cairo_restore(cr);
    }%>
}
/////////////////////////////////  GUI_ctxt
struct GUI_ctxt{
    //me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents(%0, &%1.x1, &%1.y1, &%1.x2, &%1.y2)%>
    //me void: reset() <- <%!%G %>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!cairo_set_source_rgba(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256, (double)%4 /256)%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!cairo_set_source_rgb(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256)%>
    me void: setColor(me cdColor: color) <- <%!cairo_set_source_rgb(%0, (double)%1.red /256, (double)%1.green /256, (double)%1.blue /256)%>
    me void: setLineWidth(me double: width) <- <%!cairo_set_line_width(%0, %1)%>
    me void: finishPDF() <- <%!cairo_surface_finish(cairo_get_group_target(%0))%>
    me void: setScale() <- <%!cairo_scale(%0, %1, %2)%>
    me void: moveTo(me double: x, me double: y) <- <%!cairo_move_to(%0, %1, %2)%>
    me void: lineTo(me double: x, me double: y) <- <%!cairo_line_to(%0, %1, %2)%>
    me void: moveRel(me double: dx, me double: dy) <- <%!cairo_rel_move_to(%0, %1, %2)%>
    me void: lineRel(me double: dx, me double: dy) <- <%!cairo_rel_line_to(%0, %1, %2)%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!cairo_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!cairo_rel_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: closePath() <- <%!cairo_close_path(%0)%>
    me void: rectangle(me double: leftX, me double: topY, me double: width, me double: height) <- <%!cairo_rectangle(%0, %1, %2, %3, %4)%>
    me void: paintNow() <- <%!cairo_paint(%0)%>
    me void: strokeNow() <- <%!cairo_stroke(%0)%>
    me void: fillNow() <- <%!cairo_fill(%0)%>
    me void: strokeKeep() <- <%!cairo_stroke_preserve(%0)%>
    me void: fillKeep() <- <%!cairo_fill_preserve(%0)%>
    me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>
    me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!cairo_arc(%0, %1, %2, %3, 0, 2 * M_PI)%>
}
/////////////////////////////////  GRWindow
struct GRWindow{
    void: requestRedraw()       <- <%!SDL_UpdateWindowSurface(%0)%>
}
struct GameEvent{
    me int32: type
    me UserEvent: user
    me WindowEvent: window
    me KeyboardEvent: key
    me MouseButtonEvent: button
    me MouseMotionEvent: motion
    me MouseWheelEvent: wheel
}
struct UserEvent{
    me int32: code
}
struct WindowEvent{
    me int32: event
    me int32: data1
    me int32: data2
}
struct KeyboardEvent{
    me KeyInfo: keysym
}
struct KeyInfo{
    me Keycode: sym
}
struct MouseButtonEvent{
    me int32: type
    me int32: x
    me int32: y
}

