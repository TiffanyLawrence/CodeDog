//############  Add GUI-Toolkit features using Java Swing
requirements = [
    [tagOneOf, Platform, [Java]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[]
    headers =[javax.swing.*, javax.imageio.ImageIO, java.nio.file.Paths,
        java.awt.Graphics, java.awt.Graphics2D, java.awt.image.BufferedImage,
        java.awt.*, java.awt.event.*, java.awt.geom.*, java.awt.Font,
        java.awt.event.MouseAdapter, javax.swing.event.MouseInputAdapter,
        java.awt.event.MouseListener, java.awt.event.MouseEvent
    ]
}

LibDescription ={
    useStatus  = dynamic
    description='Swing is a GUI widget toolkit for Java '
    features   =[]
    platforms  =[]
    bindings   =[]
    CPUs       =[]
}

/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{their GtkAdjustment:GUI_offset}
struct GUI_item{me Object: GUI_item}
struct GUI_menuBar{me JMenuBar: GUI_menuBar}
struct GUI_menu{me JMenu: GUI_menu}
struct GUI_menuItem{me JMenuItem: GUI_menuItem}
struct GUI_canvas{me JavaGUI_ctxt: GUI_canvas}
struct GUI_container{me JFrame:GUI_container}
struct GUI_Frame{me JFrame:GUI_Frame}
struct GUI_ScrollingWindow{me JScrollPane: GUI_ScrollingWindow}
struct INK_Image{me BufferedImage: INK_Image}
struct GUI_callback{me GCallback: GUI_callback}
struct GUI_ctxt{their JavaGUI_ctxt:GUI_ctxt}
struct GUI_Scalar{me int: GUI_Scalar}

/////////////////////////////////  HANDLE EVENTS

struct GUI_MouseEvent{
    their MouseEvent: GUI_MouseEvent
    me uint: type
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
    me uint: state
    me uint: button
}

struct GUI_MotionEvent{
    their MouseEvent: GUI_MotionEvent
}

struct GUI_ButtonEvent{
    their MouseEvent: GUI_ButtonEvent
    me uint: type
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
    me uint: state
    me uint: button
}

struct GUI_PointerEvent{
    their MouseEvent: GUI_PointerEvent
    me uint: type
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
    me uint: state
    me uint: button
}

/////////////////////////////////  HANDLE LISTENERS
struct MasterMouseListener: implements=MouseListener{
    me void: mouseClicked(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
        EventDispatcher.dispatchPointerClickEvent(e)
    }
    me void: mousePressed(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
        //GLOBAL.static_Global.thisApp.gui.pointerDown(GLOBAL.static_Global.drawing_area, eventX, eventY)
    }
    me void: mouseReleased(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
    }
    me void: mouseEntered(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
    }
    me void: mouseExited(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
    }
}

struct MasterMouseMotionListener: implements=MouseMotionListener{
    me void: mouseMoved(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
    }
    me void: mouseDragged(me GUI_MouseEvent: e)<-     {
        me int: eventX <- e.x
        me int: eventY <- e.y
    }
}

/////////////////////////////////  HANDLE LISTENERS
struct Swing_eventDispatcher{
    their widget: topWidget

    me MasterMouseListener: mouseListener
    me MasterMouseMotionListener: mouseMotionListener

    me bool: dispatchPointerMotionEvent(their GUI_MouseEvent: event) <- {return(false)}
    me bool: dispatchPointerClickEvent(their GUI_MouseEvent: event) <- <%{
        if(event.getID() == event.MOUSE_CLICKED){
            if(event.getButton() == event.BUTTON1){
                if(event.getClickCount()==1){
                    topWidget.primaryClick(event);
                } else if(event.getClickCount()==2){
                    topWidget.primaryDblClick(event);
                }
            } else if(event.getButton()==2){
                if(event.getClickCount()==1){
                    topWidget.secondaryClick(event);
                } else if(event.getClickCount()==2){
                    topWidget.secondaryDblClick(event);
                }
            }
        }
        return false;
    } %>
  //  me bool: dispatchKeyboardEvent(their GdkEventKey: event) <- {print("KEY PRESSED\n")}
  //  me bool: dispatchWindowEvent(their GdkEventConfigure: event) <- {print("Config\n")}
    // Also: timer, data and user events

    me void: registerWidgetForEventDispatcher(me JavaGUI_ctxt: appWidget, their widget: masterWidget) <- <%{
        appWidget.addMouseListener(mouseListener);
        appWidget.addMouseMotionListener(mouseMotionListener);
        topWidget = masterWidget;
    } %>
}

/////////////////////////////////   Event callbacks for GTK3
struct GLOBAL{
    me Swing_eventDispatcher: EventDispatcher

}


/////////////////////////////////  HANDLE GUI
struct GUI {
    me uint32: GUI_Init() <- <%{return(0);}%>

    me void: GUI_PopulateAndExec() <- <% {
        JFrame frame = new JFrame(title);
        frame.setSize(1000, 700);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GLOBAL.static_Global.thisApp.createAppMenu(frame);
        GLOBAL.static_Global.thisApp.createAppArea(frame);
        frame.setVisible(true);
    } %>

    me uint32: GUI_Run() <- <% {
        int status=0;
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                GUI_PopulateAndExec();
            }
        });

        return(status);
    } %>
    me void: GUI_Deinit() <- {

    }

    me GUI_menuItem: create_MenuItem(me GUI_menu: ParentMenu, me string: label) <- <%  {
        JMenuItem menuitem = new JMenuItem(label);
    ParentMenu.add(menuitem);
    ParentMenu.setVisible(true);

        return(menuitem);
    } %>

    me GUI_menu: create_SubMenu(me GUI_menu: ParentMenu, me string: label) <- <%  {
        JMenu SubMenu = new JMenu(label);
        ParentMenu.add(SubMenu);
        return(SubMenu);
    } %>

    me GUI_menu: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label) <- <%  {
        JMenu SubMenu = new JMenu(label);
        ParentMenu.add(SubMenu);
        return(SubMenu);
    } %>
}

struct GUI {
    me void: showWidget(me GUI_item: widget) <-  <%!%1.setVisible(true)%>
    me GUI_item: newCanvas() <- <%!%Gnew JavaGUI_ctxt()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%G%1.setPreferredSize(new Dimension(%2, %3))%>
    me GUI_item: newScrollingWindow() <- <%!%Gnew JScrollPane()%>
    me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!%G%1.setViewportView(%2)%>
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <- <%!%G%1.add(%2)%>
    me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%G%1.setJMenuBar(%2)%>
    me void: setCallback() <- <%!%G %>
    me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!;%>
    me GUI_item: GUI_Frame(me string: label) <- <%!%Gnew JFrame(%1)%>
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%Gnull%>
}

struct GUI_ctxt: inherits=JPanel{
    me void: reset() <- <%!GPath = new GeneralPath()%>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!gr.setColor(new Color(%1, %2, %3, %4))%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!gr.setColor(new Color(%1, %2, %3))%>
    me void: setLineWidth(me double: width) <- <%!gr.setStroke(new BasicStroke(%1))%>
    me void: finishPDF() <- <%!%GSystem.out.print("PDF Functions not given.")%>
    me void: moveTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.moveTo(%1, %2)%>
    me void: lineTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.lineTo(%1, %2)%>
    me void: moveRel(me double: dx, me double: dy) <- <%!GPath.moveTo(cr.cur_x+%1, cr.cur_y+%2)%>
    me void: lineRel(me double: dx, me double: dy) <- <%!GPath.lineTo(cr.cur_x+%1, cr.cur_y+%2)%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!GPath.curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!rel_curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: closePath() <- <%!GPath.closePath()%>
    me void: rectangle() <- <%!%0.gr.drawRect(%1, %2, %3, %4)%>
    me void: paintNow() <- <%!gr.fill(cr.GPath)%>
    me void: strokeNow() <- <%!gr.draw(cr.GPath)%>
    me void: fillNow() <- <%!gr.fill(cr.GPath)%>
    me void: strokeKeep() <- <%!gr.draw(cr.GPath)%>
    me void: fillKeep() <- <%!gr.fill(cr.GPath)%>
    me void: renderFrame() <- <%!repaint()%>
}

struct JavaGUI_ctxt: inherits=JPanel{
    their Graphics2D: gr
    me GeneralPath: GPath
    me double: cur_x
    me double: cur_y


    me void: paintComponent(me Graphics: g) <- <%    {
        super.paintComponent(g);
        GPath.reset();
        gr=(Graphics2D)(g);
        GLOBAL.static_Global.drawAppArea_cb(this, this);
    }%>
}

///////////////////////////////// TIME
struct tm{
    me Calendar: tm
}

struct timeStringer{
    me String: time12Hour() <- <%{
        Calendar timeRec = Calendar.getInstance();
        String AmPm = "am";
        int hours = timeRec.get(Calendar.HOUR);
        //if (hours>=12) {hours = hours-12; AmPm="pm";}
        if (timeRec.get(Calendar.AM_PM)==Calendar.PM){AmPm="pm";}
        if (hours==0) {hours = 12;}
        String SH = (Integer.toString(hours)+":");
        int min = timeRec.get(Calendar.MINUTE);
        if (min<10){SH = SH+"0";}
        SH = SH + Integer.toString(min);

        SH=SH+":";
        int sec = timeRec.get(Calendar.SECOND);
        if (sec<10){SH = SH+"0";}
        SH = SH + Integer.toString(sec);
        SH=SH+AmPm;
        return(SH);
    } %>
}

/////////////////////////////////  G L O B A L
struct GLOBAL{
    me APP: thisApp
    // DRAWING ROUTINES:

    me void: renderText(me GUI_ctxt: cr, me string: text, me fontSpec: font, me int: x, me int: y) <- <%{
        cr.gr.setFont(new Font(font.na/me, Font.PLAIN, (int)(font.size*1.4)));
        cr.gr.drawString(text, x, y);
    } %>



    me INK_Image[map string]: InkImgCache
    me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        filename = "assets/" + filename;
        BufferedImage picPtr=InkImgCache.get(filename);
        if (picPtr==null) {
            try{
                picPtr=ImageIO.read(new File(filename));
            } catch(IOException ioe){System.out.println("Cannot read image file " + ioe.getMessage()); System.exit(2);}
            InkImgCache.put(filename, picPtr);
            }
        cr.gr.drawImage(picPtr, null, 0,0);
    } %>

    me void: close_window() <- {
         // gtk_main_quit()
    }
    me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!%G%1.repaint(%2, %3, %4, %5)%>
    me long: ticksPerSec() <- <%!%G1000%>
    me void: copyAssetToWritableFolder(me string: fromPath, me string: toPath)<- <%{
        //TODO finish this if need to package swing build
    }%>
    me string: getFilesDirAsString()<- <%{
        String s = Paths.get(".").toAbsolutePath().normalize().toString();
        System.out.println("Current relative path is: " + s);
        return s;
    }%>

    me int: widgetHeight() <- <%!%G%1.getHeight()%>
    me int: widgetWidth() <- <%!%G%1.getWidth()%>

}
