// minimalGUI2.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "minimalGUI2"
FileName = "minimalGUI2"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is an example of a very minimal GUI"
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Threads, Unicode, Dashboard, Logger]

LicenseText = `Public Domain`

runCode=``

mainStyle = {
    colors = {
        //frGndColor = sysDefaultFrGndColor
        //bkGndColor = [45, 100, 220]   // RGB
        //highlight1Color = LightGreen
        MySpecialColor = SlateBlue
    }
    fontNames = {
        //titleFont = 'Ariel Bold'
        //normalFont = 'Ariel'
        //H1_font = sysDefaultH1_font

        //LogoFont = 'CompanyFont'
    }
    fontSizes = {
        //fontSizeVerySmall = sysDefaultFontSizeVerySmall
        fontSizeSmall     = 8
        fontSizeLarge     = 20
        LogoFontSize      = 18
    }
    fontSizeMode = pp
}

do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

////////////   A p p l i c a t i o n   a n d   G l o b a l s

struct testWidget: inherits=DashboardWidget{

    void: draw(their GUI_ctxt: cr) <- {
        print("In DRAW()\n")
        cr.setColor(Styler.DarkMagenta)
        cr.moveTo(0, 0)
        cr.lineTo(1200, 1200)
        cr.moveTo(1200, 0)
        cr.lineTo(0, 1200)
        cr.strokeNow()

        cr.setColor(Styler.DarkSlateBlue)
        our fontSpec:: testFont{"Ariel", 20, 0}
        renderText(cr, "Hello World!", testFont, 150, 100)
        cr.strokeNow()

        // Here you can add tests for other drawing functions:
        //    setRGB(), setRGBA()
        //    setLineWidth()
        //    setScale()
        //    moveRel(), lineRel()
        //    curveTo(), curveRel()
        //    closePath()
        //    rectangle()
        //    fillNow(), etc
        //    setFillPattern() and gradient control functions.
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }

    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("SECONDARY CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }
}

struct GLOBAL{
    their GUI_canvas: drawing_area
    their testWidget: drawAnX
    me int: fontSize
}

struct APP{
    my GUI: gui
    me GUI_ScrollingWindow: scrollerRef

    me void: createAppMenu(me GUI_Frame: frame) <- {}

    me void: createAppArea(me GUI_Frame: frame) <- {
        drawing_area  <- gui.newCanvas()
        gui.setWidgetSize(drawing_area, 1200, 1200)
        Allocate(drawAnX)
        drawAnX.EventDispatcher.registerWidgetForEventDispatcher(drawing_area, drawAnX)
        addToContainerAndExpand (frame, drawing_area)
    }
}
