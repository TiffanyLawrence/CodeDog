// newListParse.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "newListParse"
FileName = "newListParse"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "newListParse"
ProgramOrLibrary = "program"

featuresNeeded = []

LicenseText = `Public Domain`


runCode=`runProg()`

#include LIBS/impl.list.dog

struct gloop<key, value>{
    me int: i
    me key: k
    our value: val
}

struct myList1<nodeType>: implements = List specs = {append = fast}{
    void: append(me nodeType: item) <- {}
}
struct myList2<nodeType>: implements = List specs = {append = slow}{
    void: append(me nodeType: item) <- {}
}
struct GLOBAL{
    void: runProg()<-{
        me gloop<me int, me string>: testList
        me List<int: append = slow > : intList
        intList.append(5)
        testDequeAsList()
        print("\nHello World!\n")
    }
    void: testDequeAsList()<-{
        print("testDequeAsList\n")
        me CPP_Deque<me int>: testCPPD
        print("isEmpty:"+testCPPD.isEmpty())
        testCPPD.pushLast(1)
        testCPPD.pushLast(3)
        testCPPD.pushFirst(5)
        testCPPD.pushFirst(6)
        testCPPD.pushFirst(8)
        testCPPD.pushFirst(4)
        testCPPD.pushFirst(7)
        withEach item in testCPPD{
            print("\n    item:"+ toString(item))
        }
        //me int: valAt <- testCPPD.at(2)
        //print("\nvalAt:"+ toString(valAt))
        itr deque<int>: firstItr <- testCPPD.front()
        print("\nfirstItr:"+ toString(firstItr.val))
        me int: firstItm <- testCPPD.first()
        print("\nfirstItm:"+ toString(firstItm))
        itr deque<int>: lastItr <- testCPPD.end()
        print("\nlastItr:"+ toString(lastItr.val))
        itr deque<int>: nThItr <- testCPPD.nthItr(2)
        print("\nnThItr:"+ toString(nThItr.val))
        me int: lastItm <- testCPPD.last()
        print("\nlastItm:"+ toString(lastItm))
        itr deque<int>: insertItr <- testCPPD.nthItr(2)
        print("\nnThItr:"+ toString(nThItr.val))
        itr deque<int>:instItr <- testCPPD.insertIdx(3,16)
        print("\ninstItr:"+ toString(instItr.val))
        //////////////////////////////////////////////////
        itr deque<int>: nxtItr <- testCPPD.insert(lastItr, 99)
        print("\nnxtItr:"+ toString(nxtItr.val()))
        me int: firstPop <-testCPPD.popFirst()
        me int: lastPop  <-testCPPD.popLast()
        print("\nfirstPop:"+ toString(firstPop))
        print("\nlastPop:"+ toString(lastPop))
        print("\nSize:"+ toString(testCPPD.size()))
        withEach item2 in testCPPD{
            print("\n    item:"+ toString(item2))
        }
        itr deque<int>: delItr <- testCPPD.deleteNth(2)
        print("\ndelItr:"+ toString(delItr.val()))
        testCPPD.clipToSize(3)

        print("\nSize after resize:"+ toString(testCPPD.size()))
        testCPPD.clear()
        print("\nSize after clear:"+ toString(testCPPD.size()))
    }
}
